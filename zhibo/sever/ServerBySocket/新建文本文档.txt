using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MySQLDriverCS;
using WindowsFormsApplication1;

namespace ServerBySocket
{
    public partial class ServerForm : Form
    {
        SocketManager _sm = null;
        string ip = "192.168.1.101";
        int port = 26900;
        public static string cardID;
        public static string money;
        public static string Old_Cip;
        public MySQLConnection mq;
        public static DateTime dtime;
        public static string guan;
        public static string yong;
        public ServerForm()
        {
            InitializeComponent();
            mq = new MySQLConnection(new MySQLConnectionString("localhost", "mysql", "root", "123").AsString);
            mq.Open();    
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            _sm = new SocketManager(ip, port);
            _sm.OnReceiveMsg += OnReceiveMsg;
            _sm.OnConnected += OnConnected;
            _sm.OnDisConnected += OnDisConnected;
            _sm.Start();
            init();
        }

        void init()
        {
            txtMsg.Text += GetDateNow() +"  服务器启动成功！\r\n";
            lblIp.Text = ip;
            lblPort.Text = port.ToString();
            lblStatus.Text = "正常启动";
        }

        public void OnReceiveMsg(string ip)
        {
            byte[] buffer = _sm._listSocketInfo[ip].msgBuffer;
            string msg = Encoding.ASCII.GetString(buffer).Replace("\0", "");
            if (txtMsg.InvokeRequired)
            {
                this.Invoke(new Action(() =>
                {
                    txtMsg.Text += AppendReceiveMsg(msg, ip);                   
                }));

            }
            else
            {
                txtMsg.Text += AppendReceiveMsg(msg, ip);
            }
            Receivesredus(msg, ip);
        }

        public void OnConnected(string clientIP)
        {
            string ipstr = clientIP.Split(':')[0];
            string portstr = clientIP.Split(':')[1];
            if (txtMsg.InvokeRequired)
            {
                this.Invoke(new Action(() => {
                    txtMsg.Text += clientIP + "已连接至本机\r\n";
                    object obj = new { Value = clientIP, Text = clientIP };
                    cbClient.Items.Add(obj);
                    cbClient.DisplayMember = "Value";
                    cbClient.ValueMember = "Text";
                    cbClient.SelectedItem = obj;
                }));
            }
            else
            {
                txtMsg.Text += clientIP + "已连接至本机\r\n";
            }
        }

        public void OnDisConnected(string clientIp)
        {
            if (txtMsg.InvokeRequired)
            {
                this.Invoke(new Action(() =>
                {
                    txtMsg.Text += clientIp + "已经断开连接！\r\n";
                    object obj = new { Value = clientIp, Text = clientIp };
                    cbClient.Items.Remove(obj);
                }));
            }
            else
            {
                txtMsg.Text += clientIp + "已经断开连接！\r\n";
            }
        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            if (!_sm._listSocketInfo.Keys.Contains(cbClient.Text)) return;
            _sm.SendMsg(txtSend.Text, cbClient.Text);
            txtMsg.Text += AppendSendMsg(txtSend.Text, cbClient.Text);
            txtSend.Text = "";
        }

        public string AppendSendMsg(string msg, string ipClient)
        {
            return GetDateNow() + "  " + "[发送" + ipClient + "]  " + msg + "\r\n\r\n";
        }

        public string AppendReceiveMsg(string msg, string ipClient)
        {
            return GetDateNow() + "  " + "[接收" + ipClient + "]  " + msg + "\r\n\r\n";
        }

        public void Receivesredus(string msg, string ipClient)
        {
            if (msg.IndexOf("android") != -1)
            {
                yong = ipClient;
            }
            if (msg.IndexOf("stm32") != -1)
            {
                guan = ipClient;
            }
            if(Old_Cip!=ipClient)
                Old_Cip = ipClient;
            TimeSpan ds = new TimeSpan();
            ds = DateTime.Now - dtime;                         
            int total = ds.Seconds;
            if (total > 5)
            {
                dtime = DateTime.Now;
                if (msg.IndexOf("ID") != -1)
                {
                    string[] sArray = msg.Split(':');
                    if (txtcardID.InvokeRequired)
                    {
                        this.Invoke(new Action(() =>
                        txtcardID.Text = sArray[1]));

                    }
                }
                if (msg.IndexOf("iD") != -1)
                {
                    string[] sArray = msg.Split(':');
                    if (txtcardID.InvokeRequired)
                    {
                        this.Invoke(new Action(() =>
                        txtcardID.Text = sArray[1]));
                        
                    }
                    DateTime dt = DateTime.Now;
                    MySQLCommand comm = new MySQLCommand("SELECT * FROM `rfid_car` WHERE rfid_car.ID ='" + txtcardID.Text + "'", mq);
                    MySQLDataAdapter da = new MySQLDataAdapter();
                    comm.ExecuteNonQuery();
                    MySQLDataReader mqdata = comm.ExecuteReaderEx();
                    while (mqdata.Read())
                    {
                        if (mqdata.GetString(1) != null)
                        {
                            string ta = mqdata.GetString(4);
                            if (ta == "")
                            {
                                string time = "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'";
                                comm = new MySQLCommand("UPDATE rfid_car SET date = " + time + " WHERE ID = '" + txtcardID.Text + "'", mq); //更新停车信息
                                comm.ExecuteNonQuery();
                                string dta = "8inttime:" + time + "\r\n";
                                _sm.SendMsg(dta,Old_Cip);
                                if (txtMsg.InvokeRequired)
                                {
                                    this.Invoke(new Action(() =>
                                    {
                                        txtMsg.Text += (dta + Old_Cip);
                                    }));

                                }
                                if (yong != null)
                                    _sm.SendMsg(dta, yong);
                                if (guan != null)
                                    _sm.SendMsg(dta, guan);
                            }
                            else
                            {
                                TimeSpan ts = new TimeSpan();
                                ts = DateTime.Now - Convert.ToDateTime(mqdata.GetString(4));//使用时间
                                string mo= Convert.ToString(ts.Seconds / 5);  //金额计算 时间/倍数
                                string flag = "9usetime:" + ts.TotalSeconds.ToString() + "in:" + mqdata.GetString(4) + "out:" + DateTime.Now.ToString() + "\r\n";
                                comm = new MySQLCommand("UPDATE rfid_car SET date = NULL WHERE ID = '" + txtcardID.Text + "'", mq);   // 数据查找 更新停车信息
                                comm.ExecuteNonQuery();
                                comm = new MySQLCommand("UPDATE rfid_car SET money = money-'" + mo + "'WHERE ID = '" + txtcardID.Text + "'", mq); // 扣费
                                comm.ExecuteNonQuery();
                                _sm.SendMsg(flag,Old_Cip);
                                if (txtMsg.InvokeRequired)
                                {
                                    this.Invoke(new Action(() =>
                                    {
                                        txtMsg.Text += (flag + Old_Cip);
                                    }));

                                }
                                //else txtMsg.Text += (flag + Old_Cip);
                                if (yong != null)
                                    _sm.SendMsg(flag, yong);
                                if (guan != null)
                                    _sm.SendMsg(flag, guan);
                            }
                        }
                        else
                            _sm.SendMsg("user does not exist", Old_Cip);
                    }
                }
                if (msg.IndexOf("phone") != -1)
                {
                    string[] sArray = msg.Split(':');
                    if (msg.IndexOf("zc") != -1)
                    {
                        MySQLCommand comm;
                        MySQLDataAdapter da = new MySQLDataAdapter();
                        string mydata = "'" + sArray[1] + "','" + sArray[2] + "','" + sArray[3] + "','" + sArray[4] + "'";
                        comm = new MySQLCommand("INSERT INTO user_car(name,carnum,phone,money) VALUES(" + mydata + ")", mq);
                        comm.ExecuteNonQuery();
                        _sm.SendMsg("success", Old_Cip);
                    }
                    else if (msg.IndexOf("enter") != -1)
                    {
                        MySQLCommand comm = new MySQLCommand("SELECT * FROM `rfid_car` WHERE rfid_car.ID ='" + txtcardID.Text + "'", mq);
                        MySQLDataAdapter da = new MySQLDataAdapter();
                        comm.ExecuteNonQuery();
                        MySQLDataReader mqdata = comm.ExecuteReaderEx();
                        while (mqdata.Read())
                        {
                            if (mqdata.GetString(1) != null)
                            {
                                _sm.SendMsg("success", Old_Cip);
                            }
                            else
                                _sm.SendMsg("error", Old_Cip);
                        }                       
                    }
                    else if (msg.IndexOf("car") != -1)
                    {
                        _sm.SendMsg("job", guan);
                    }
                }
            }
        }

        public string GetDateNow()
        {
            return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            _sm.Stop();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            cardID = txtcardID.Text;
            Form2 form = new Form2();
            form.ShowDialog();
        }

    }
}
